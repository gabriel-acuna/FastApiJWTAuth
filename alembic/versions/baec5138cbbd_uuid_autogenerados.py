"""uuid autogenerados

Revision ID: baec5138cbbd
Revises: 
Create Date: 2021-08-10 10:47:58.502263

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session
from app.utils.cargar_datos import CsvtoList
from app.models.core.modelos_principales import Provincia, Canton
import json

# revision identifiers, used by Alembic.
revision = 'baec5138cbbd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categorias_contratos_profesores',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('categoria_contrato', sa.String(
                        length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('categoria_contrato')
                    )
    op.create_index(op.f('ix_categorias_contratos_profesores_id'),
                    'categorias_contratos_profesores', ['id'], unique=False)

    op.create_table('categorias_docentes_losep',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('categoria_docente', sa.String(
                        length=50), nullable=True),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('categoria_docente')
                    )
    op.create_index(op.f('ix_categorias_docentes_losep_id'),
                    'categorias_docentes_losep', ['id'], unique=False)

    op.create_table('cuentas_usuarios',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('primer_nombre', sa.String(
                        length=30), nullable=False),
                    sa.Column('segundo_nombre', sa.String(
                        length=30), nullable=False),
                    sa.Column('primer_apellido', sa.String(
                        length=30), nullable=False),
                    sa.Column('segundo_segundo', sa.String(
                        length=30), nullable=False),
                    sa.Column('email', sa.String(), nullable=False),
                    sa.Column('clave_encriptada', sa.String(), nullable=False),
                    sa.Column('estado', sa.Boolean(), nullable=True),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_cuentas_usuarios_id'),
                    'cuentas_usuarios', ['id'], unique=False)

    op.create_table('discapacidades',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('discapacidad', sa.String(
                        length=30), nullable=True),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('discapacidad')
                    )
    op.create_index(op.f('ix_discapacidades_id'),
                    'discapacidades', ['id'], unique=False)

    op.create_table('etnias',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('etnia', sa.String(length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('etnia')
                    )
    op.create_index(op.f('ix_etnias_id'), 'etnias', ['id'], unique=False)

    op.create_table('nacionalidades',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('nacionalidad', sa.String(
                        length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('nacionalidad')
                    )
    op.create_index(op.f('ix_nacionalidades_id'),
                    'nacionalidades', ['id'], unique=False)

    op.create_table('nivel_educativo',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('nivel', sa.String(length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('nivel')
                    )
    op.create_index(op.f('ix_nivel_educativo_id'),
                    'nivel_educativo', ['id'], unique=False)

    paises = op.create_table('paises',
                             sa.Column('id', sa.Integer(), nullable=False),
                             sa.Column('pais', sa.String(
                                 length=120), nullable=False),
                             sa.Column('nacionalidad', sa.String(
                                 length=120), nullable=True),
                             sa.Column('registrado_en', postgresql.TIMESTAMP(),
                                       server_default=sa.text('now()'), nullable=True),
                             sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                                       server_default=sa.text('now()'), nullable=True),
                             sa.PrimaryKeyConstraint('id')
                             )
    op.create_index(op.f('ix_paises_id'), 'paises', ['id'], unique=False)

    print("Insertando datos en tabla pa√≠ses ...")
    try:
        file_path = '.\\app\\utils\\listado_paises.csv'
        listado_paises = CsvtoList(filename=file_path)
        op.bulk_insert(paises, listado_paises.getList(),  multiinsert=False)
        print("Datos insertados")
    except Exception as ex:

        print(f"{ex}")

    op.create_table('provincias',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('provincia', sa.String(
                        length=120), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_provincias_id'),
                    'provincias', ['id'], unique=False)

    op.create_table('relaciones_ies',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('relacion', sa.String(
                        length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('relacion')
                    )
    op.create_index(op.f('ix_relaciones_ies_id'),
                    'relaciones_ies', ['id'], unique=False)

    op.create_table('roles',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('rol', sa.String(length=50), nullable=False),
                    sa.Column('descripcion', sa.String(
                        length=120), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)

    op.create_table('tiempo_dedicacion_profesores',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('tiempo_dedicacion', sa.String(
                        length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('tiempo_dedicacion')
                    )
    op.create_index(op.f('ix_tiempo_dedicacion_profesores_id'),
                    'tiempo_dedicacion_profesores', ['id'], unique=False)

    op.create_table('tipo_funcionarios',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('tipo', sa.String(length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('tipo')
                    )
    op.create_index(op.f('ix_tipo_funcionarios_id'),
                    'tipo_funcionarios', ['id'], unique=False)

    op.create_table('tipos_docente_loes',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('tipo_docente', sa.String(
                        length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('tipo_docente')
                    )
    op.create_index(op.f('ix_tipos_docente_loes_id'),
                    'tipos_docente_loes', ['id'], unique=False)

    op.create_table('tipos_documento',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('tipo_documento', sa.String(
                        length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('tipo_documento')
                    )
    op.create_index(op.f('ix_tipos_documento_id'),
                    'tipos_documento', ['id'], unique=False)

    op.create_table('tipos_relaciones_nombramientos',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('escalafon_nombramiento',
                              sa.String(length=50), nullable=False),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('escalafon_nombramiento')
                    )
    op.create_index(op.f('ix_tipos_relaciones_nombramientos_id'),
                    'tipos_relaciones_nombramientos', ['id'], unique=False)

    op.create_table('cantones',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('canton', sa.String(length=120), nullable=False),
                    sa.Column('provincia_id', sa.Integer(), nullable=True),
                    sa.Column('registrado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('actualizado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['provincia_id'], ['provincias.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.create_table('roles_usuarios',
                    sa.Column('rol_id', postgresql.UUID(), nullable=True),
                    sa.Column('usuario_id', postgresql.UUID(), nullable=True),
                    sa.ForeignKeyConstraint(['rol_id'], ['roles.id'], ),
                    sa.ForeignKeyConstraint(
                        ['usuario_id'], ['cuentas_usuarios.id'], )
                    )

    op.create_table('tokens_autorizaciones',
                    sa.Column('id', postgresql.UUID(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('tipo_token', sa.Enum(
                        'acceso', 'solicitud_cambio_calve', name='tipoToken'), nullable=False),
                    sa.Column('token', sa.String(), nullable=False),
                    sa.Column('usuario_id', postgresql.UUID(), nullable=True),
                    sa.Column('generado_en', postgresql.TIMESTAMP(),
                              server_default=sa.text('now()'), nullable=True),
                    sa.Column('usado_hasta', sa.DateTime(), nullable=True),
                    sa.Column('estado', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['usuario_id'], ['cuentas_usuarios.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_tokens_autorizaciones_id'),
                    'tokens_autorizaciones', ['id'], unique=False)

    session = Session(bind=op.get_bind())
    print("Insertando datos en las tablas provincias y cantones ...")
    try:
        file_path = '.\\app\\utils\\provincias_cantones.json'
        with open(file_path, encoding='utf8') as f:
            listado_provincias = json.load(f)
        for fila in listado_provincias:
            cantones = []
            p = Provincia()
            p.provincia = fila["provincia"]
            for canton in fila["cantones"]:
                c = Canton()
                c.canton = canton
                cantones.append(c)
            p.cantones = cantones
            session.add(p)
        session.commit()

        print("Datos insertados")
    except Exception as ex:

        print(f"{ex}")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tokens_autorizaciones_id'),
                  table_name='tokens_autorizaciones')
    op.drop_table('tokens_autorizaciones')
    op.drop_table('roles_usuarios')
    op.drop_table('cantones')
    op.drop_index(op.f('ix_tipos_relaciones_nombramientos_id'),
                  table_name='tipos_relaciones_nombramientos')
    op.drop_table('tipos_relaciones_nombramientos')
    op.drop_index(op.f('ix_tipos_documento_id'), table_name='tipos_documento')
    op.drop_table('tipos_documento')
    op.drop_index(op.f('ix_tipos_docente_loes_id'),
                  table_name='tipos_docente_loes')
    op.drop_table('tipos_docente_loes')
    op.drop_index(op.f('ix_tipo_funcionarios_id'),
                  table_name='tipo_funcionarios')
    op.drop_table('tipo_funcionarios')
    op.drop_index(op.f('ix_tiempo_dedicacion_profesores_id'),
                  table_name='tiempo_dedicacion_profesores')
    op.drop_table('tiempo_dedicacion_profesores')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_relaciones_ies_id'), table_name='relaciones_ies')
    op.drop_table('relaciones_ies')
    op.drop_index(op.f('ix_provincias_id'), table_name='provincias')
    op.drop_table('provincias')
    op.drop_index(op.f('ix_paises_id'), table_name='paises')
    op.drop_table('paises')
    op.drop_index(op.f('ix_nivel_educativo_id'), table_name='nivel_educativo')
    op.drop_table('nivel_educativo')
    op.drop_index(op.f('ix_nacionalidades_id'), table_name='nacionalidades')
    op.drop_table('nacionalidades')
    op.drop_index(op.f('ix_etnias_id'), table_name='etnias')
    op.drop_table('etnias')
    op.drop_index(op.f('ix_discapacidades_id'), table_name='discapacidades')
    op.drop_table('discapacidades')
    op.drop_index(op.f('ix_cuentas_usuarios_id'),
                  table_name='cuentas_usuarios')
    op.drop_table('cuentas_usuarios')
    op.drop_index(op.f('ix_categorias_docentes_losep_id'),
                  table_name='categorias_docentes_losep')
    op.drop_table('categorias_docentes_losep')
    op.drop_index(op.f('ix_categorias_contratos_profesores_id'),
                  table_name='categorias_contratos_profesores')
    op.drop_table('categorias_contratos_profesores')
    sa.Enum(name='tipoToken').drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
